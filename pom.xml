<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.sbvdeveloper</groupId>
	<artifactId>e-reservation</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>e-reservation</name>
	<description>Project for Spring Boot, Aplicación de reservas </description>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Lombok no se enpaqueta con el proyecto, solo ayuda al proceso de construcción -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<!-- <version>1.18.16</version> -->
			<scope>provided</scope>
		</dependency>
		<!-- JPA y PosgresQL -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<!-- Swagger -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>

		<!--Seguridad -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- Si se trabaja con JDK 9+ COLOCAR MANUAL -->
		<!-- https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
		</dependency>

		<!-- Si se trabaja con JDK 9+ COLOCAR MANUAL -->
		<!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
			<!-- <version>2.0.4.RELEASE</version> -->
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>




		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>


		<finalName>e-reservation</finalName><!-- nombre final de la aplicacion -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Esto permite construir una imagen a partir de nuestro pom, en el 
				momento que estemos configurando -->
			<!-- y no tenerlo que correr desde nuestro terminal -->
			<plugin>
				<groupId>io.fabric8</groupId><!-- plugin para hacer imagenes -->
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.27.2</version>
				<configuration><!-- Seccion de configuracion -->
					<images>
						<image>
							<name>santbetv/${project.build.finalName}</name><!-- Usuario y finalName -->
							<build>
								<from>openjdk</from><!-- JDK libre , independiente -->
								<entryPoint>java -Dspring.profiles.active=prod -jar
									/home/rizzoli/Documentos/DockerImagenIndependientes/${project.build.finalName}.jar</entryPoint><!-- 
									Crear imagen para produccion -->
								<assembly><!-- Como se ensambla o construye internamente -->
									<basedir>/home/rizzoli/Documentos/DockerImagenIndependientes/</basedir><!-- 
										directorio base para la generacion de imagen -->
									<descriptorRef>artifact</descriptorRef>
									<inline>
										<id>assembly</id>
										<files>
											<file>
												<source>target/${project.build.finalName}.jar</source><!-- Archivo 
													a partir de cual se genrear la imagen -->
											</file>
										</files>
									</inline>
								</assembly>
								<tags><!-- Versionador -->
									<tag>latest</tag><!-- Siempre el ultimo -->
								</tags>
								<ports>
									<port>8080</port><!-- puerto por donde sale la app -->
								</ports>
							</build>
							<run><!-- Ejecucion -->
								<namingStrategy>alias</namingStrategy><!-- alias para poder ejecutarse -->
							</run>
							<alias>${project.build.finalName}</alias>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
